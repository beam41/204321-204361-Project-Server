{"version":3,"sources":["../../src/databases/usn-map.ts"],"names":["sql","sqlite3","verbose","dbMem","Database","err","console","error","colors","red","message","log","green","Date","toUTCString","runDB","run","insertNew","Username","SocketId","mapping","found","Promise","resolve","reject","all","row","then","value"],"mappings":";;;;;;;;;;AAAA;;AACA;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,mBAAQC,OAAR,EAAZ;;AAEO,IAAMC,KAAK,GAAG,IAAIH,GAAG,CAACI,QAAR,CAAiB,UAAjB,EAA6B,UAAAC,GAAG,EAAI;AACvD,MAAIA,GAAJ,EAASC,OAAO,CAACC,KAAR,CAAcC,iBAAOC,GAAP,CAAWJ,GAAG,CAACK,OAAf,CAAd,EAAT,KAEEJ,OAAO,CAACK,GAAR,CACEH,iBAAOI,KAAP,CACE,MACE,IAAIC,IAAJ,GAAWC,WAAX,EADF,GAEE,IAFF,GAGE,oDAJJ,CADF;AAQH,CAXoB,CAAd;;;AAYA,SAASC,KAAT,GAAiB;AACtBZ,EAAAA,KAAK,CAACa,GAAN,wKASE,UAAAX,GAAG,EAAI;AACL,QAAIA,GAAJ,EAASC,OAAO,CAACC,KAAR,CAAcC,iBAAOC,GAAP,CAAWJ,GAAG,CAACK,OAAf,CAAd;AACV,GAXH;AAaD;;AAEM,SAASO,SAAT,CAAmBC,QAAnB,EAAqCC,QAArC,EAA6D;AAClEhB,EAAAA,KAAK,CAACa,GAAN,+EAGaE,QAHb,iBAG4BC,QAH5B,SAIE,UAAAd,GAAG,EAAI;AACL,QAAIA,GAAJ,EAASC,OAAO,CAACC,KAAR,CAAcC,iBAAOC,GAAP,CAAWJ,GAAG,CAACK,OAAf,CAAd;AACV,GANH;AAQD;;SAEqBU,O;;;;;;;0BAAf,iBAAuBF,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACDG,YAAAA,KADC,GACO,EADP;AAAA;AAAA,mBAEC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,qBAChBrB,KAAK,CAACsB,GAAN,4EAIsBP,QAJtB,cAME,UAACb,GAAD,EAAMqB,GAAN,EAAc;AACZ,oBAAIrB,GAAJ,EAASmB,MAAM,CAACnB,GAAD,CAAN,CAAT,KACKkB,OAAO,CAACG,GAAD,CAAP;AACN,eATH,CADgB;AAAA,aAAZ,EAYJC,IAZI,CAYC,UAACC,KAAD,EAAgB;AACrB,kBAAIA,KAAJ,EAAWP,KAAK,GAAGO,KAAR;AACZ,aAdK,CAFD;;AAAA;AAAA,6CAiBEP,KAjBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import sqlite3 from \"sqlite3\"\nimport colors from \"colors/safe\"\n\nconst sql = sqlite3.verbose()\n\nexport const dbMem = new sql.Database(\":memory:\", err => {\n  if (err) console.error(colors.red(err.message))\n  else\n    console.log(\n      colors.green(\n        \"[\" +\n          new Date().toUTCString() +\n          \"] \" +\n          \"[SQLite-UserNameMap] Created in memory database :)\",\n      ),\n    )\n})\nexport function runDB() {\n  dbMem.run(\n    `\n  CREATE TABLE IF NOT EXISTS MAP (\n    Id        INTEGER NOT NULL UNIQUE,\n    Username  TEXT  NOT NULL,\n    SocketId  INTEGER,\n    PRIMARY KEY (Id)\n  );\n  `,\n    err => {\n      if (err) console.error(colors.red(err.message))\n    },\n  )\n}\n\nexport function insertNew(Username: string, SocketId: string): void {\n  dbMem.run(\n    `\n    INSERT OR REPLACE INTO MAP (Username, SocketId)\n    VALUES ('${Username}', '${SocketId}')`,\n    err => {\n      if (err) console.error(colors.red(err.message))\n    },\n  )\n}\n\nexport async function mapping(Username: string): Promise<any[]> {\n  let found = []\n  await new Promise((resolve, reject) =>\n    dbMem.all(\n      `\n    SELECT  SocketId\n    FROM    MAP\n    WHERE   Username = '${Username}'\n    `,\n      (err, row) => {\n        if (err) reject(err)\n        else resolve(row)\n      },\n    ),\n  ).then((value: any) => {\n    if (value) found = value\n  })\n  return found\n}\n"],"file":"usn-map.js"}