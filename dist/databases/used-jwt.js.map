{"version":3,"sources":["../../src/databases/used-jwt.ts"],"names":["sql","sqlite3","verbose","dbMem","Database","err","console","error","colors","red","message","log","green","Date","toUTCString","runDB","run","setInterval","now","changes","insertNew","jwt","expireTime","findExpJwt","found","Promise","resolve","reject","get","row","then","value"],"mappings":";;;;;;;;;;AAAA;;AACA;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,mBAAQC,OAAR,EAAZ;;AAEO,IAAMC,KAAK,GAAG,IAAIH,GAAG,CAACI,QAAR,CAAiB,UAAjB,EAA6B,UAAAC,GAAG,EAAI;AACvD,MAAIA,GAAJ,EAASC,OAAO,CAACC,KAAR,CAAcC,iBAAOC,GAAP,CAAWJ,GAAG,CAACK,OAAf,CAAd,EAAT,KAEEJ,OAAO,CAACK,GAAR,CACEH,iBAAOI,KAAP,CACE,MACE,IAAIC,IAAJ,GAAWC,WAAX,EADF,GAEE,IAFF,GAGE,4CAJJ,CADF;AAQH,CAXoB,CAAd;;;AAYA,SAASC,KAAT,GAAiB;AACtBZ,EAAAA,KAAK,CAACa,GAAN,iJAQE,UAAAX,GAAG,EAAI;AACL,QAAIA,GAAJ,EAASC,OAAO,CAACC,KAAR,CAAcC,iBAAOC,GAAP,CAAWJ,GAAG,CAACK,OAAf,CAAd;AACV,GAVH;AAaAO,EAAAA,WAAW,CACT;AAAA,WACEd,KAAK,CAACa,GAAN,6DAGqBH,IAAI,CAACK,GAAL,EAHrB,WAKE,UAASb,GAAT,EAAc;AACZ,UAAIA,GAAJ,EAASC,OAAO,CAACC,KAAR,CAAcC,iBAAOC,GAAP,CAAWJ,GAAG,CAACK,OAAf,CAAd,EAAT,KACK,IAAI,KAAKS,OAAL,GAAe,CAAnB,EACHb,OAAO,CAACK,GAAR,CACE,MACE,IAAIE,IAAJ,GAAWC,WAAX,EADF,GAEE,IAFF,0BAGkB,KAAKK,OAHvB,oBADF;AAMH,KAdH,CADF;AAAA,GADS,EAkBT,OAlBS,CAAX;AAoBD;;AAEM,SAASC,SAAT,CAAmBC,GAAnB,EAAgCC,UAAhC,EAA0D;AAC/DnB,EAAAA,KAAK,CAACa,GAAN,+CAGaK,GAHb,gBAGsBC,UAHtB,QAIE,UAAAjB,GAAG,EAAI;AACL,QAAIA,GAAJ,EAASC,OAAO,CAACC,KAAR,CAAcC,iBAAOC,GAAP,CAAWJ,GAAG,CAACK,OAAf,CAAd;AACV,GANH;AAQD;;SAEqBa,U;;;;;;;0BAAf,iBAA0BF,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACDG,YAAAA,KADC,GACO,KADP;AAAA;AAAA,mBAEC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,qBAChBxB,KAAK,CAACyB,GAAN,oEAIqBP,GAJrB,cAME,UAAChB,GAAD,EAAMwB,GAAN,EAAc;AACZ,oBAAIxB,GAAJ,EAASsB,MAAM,CAACtB,GAAD,CAAN,CAAT,KACKqB,OAAO,CAACG,GAAD,CAAP;AACN,eATH,CADgB;AAAA,aAAZ,EAYJC,IAZI,CAYC,UAAAC,KAAK,EAAI;AACd,kBAAIA,KAAJ,EAAWP,KAAK,GAAG,IAAR;AACZ,aAdK,CAFD;;AAAA;AAAA,6CAiBEA,KAjBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import sqlite3 from \"sqlite3\"\nimport colors from \"colors/safe\"\n\nconst sql = sqlite3.verbose()\n\nexport const dbMem = new sql.Database(\":memory:\", err => {\n  if (err) console.error(colors.red(err.message))\n  else\n    console.log(\n      colors.green(\n        \"[\" +\n          new Date().toUTCString() +\n          \"] \" +\n          \"[SQLite-JWT] Created in memory database :)\",\n      ),\n    )\n})\nexport function runDB() {\n  dbMem.run(\n    `\n  CREATE TABLE IF NOT EXISTS JWT (\n    JwtCode     TEXT  NOT NULL  UNIQUE,\n    expireTime  INTEGER,\n    PRIMARY KEY (JwtCode)\n  );\n  `,\n    err => {\n      if (err) console.error(colors.red(err.message))\n    },\n  )\n\n  setInterval(\n    () =>\n      dbMem.run(\n        `\n      DELETE FROM JWT\n      WHERE expireTime < ${Date.now()}\n  `,\n        function(err) {\n          if (err) console.error(colors.red(err.message))\n          else if (this.changes > 0)\n            console.log(\n              \"[\" +\n                new Date().toUTCString() +\n                \"] \" +\n                `[SQLite-JWT] ${this.changes} Row(s) deleted`,\n            )\n        },\n      ),\n    1_800_000,\n  )\n}\n\nexport function insertNew(jwt: string, expireTime: number): void {\n  dbMem.run(\n    `\n    INSERT INTO JWT\n    VALUES ('${jwt}', ${expireTime})`,\n    err => {\n      if (err) console.error(colors.red(err.message))\n    },\n  )\n}\n\nexport async function findExpJwt(jwt: string): Promise<boolean> {\n  let found = false\n  await new Promise((resolve, reject) =>\n    dbMem.get(\n      `\n    SELECT  *\n    FROM    JWT\n    WHERE   JwtCode = '${jwt}'\n    `,\n      (err, row) => {\n        if (err) reject(err)\n        else resolve(row)\n      },\n    ),\n  ).then(value => {\n    if (value) found = true\n  })\n  return found\n}\n"],"file":"used-jwt.js"}