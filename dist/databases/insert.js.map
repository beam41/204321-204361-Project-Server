{"version":3,"sources":["../../src/databases/insert.ts"],"names":["testInsert","db","exec","err","console","error","colors","red","message","insertCourses","arr","log","green","Date","toUTCString","all","map","val","CourseID","CourseName","replace","CourseCredit","strall","join","Promise","resolve","reject","insertUsers","adv","filter","type","std","progressAdv","progressStd","forEach","push","ID","name","surname","password","advID","insertPlans","progress","plans","val2","Year","Term","Grade","newChat","StudentID","AdvisorID","Time","Message","SentBy"],"mappings":"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","sourcesContent":["import { db } from \"./index\"\nimport { Course, User, Chat } from \"../models\"\nimport colors from \"colors/safe\"\n\nexport function testInsert(): void {\n  db.exec(\n    \"INSERT INTO STUDENT VALUES ('600510569', 'Phumdol', 'Lookthipnapha', '000000000', 'project')\",\n    err => {\n      if (err) console.error(colors.red(err.message))\n    },\n  )\n}\n\nexport async function insertCourses(arr: Course[]): Promise<void> {\n  console.log(\n    colors.green(\n      \"[\" + new Date().toUTCString() + \"] \" + \"[SQLite] Insert Courses!\",\n    ),\n  )\n  const all = arr.map(\n    val =>\n      `('${val.CourseID}', '${val.CourseName.replace(/\\'/g, \"''\")}', ${\n        val.CourseCredit\n      })`,\n  )\n  const strall = all.join(\",\")\n  await new Promise((resolve, reject) =>\n    db.exec(\n      `\n        INSERT OR IGNORE INTO COURSE (CourseID, CourseName, CourseCredit)\n        VALUES ${strall};\n        `,\n      err => {\n        if (err) console.error(colors.red(err.message))\n        resolve()\n      },\n    ),\n  )\n  console.log(\n    colors.green(\n      \"[\" +\n        new Date().toUTCString() +\n        \"] \" +\n        \"[SQLite] Insert Courses complete!\",\n    ),\n  )\n}\n\nexport async function insertUsers(arr: User[]): Promise<void> {\n  db.exec(\"PRAGMA synchronous=OFF\")\n  console.log(\n    colors.green(\n      \"[\" + new Date().toUTCString() + \"] \" + \"[SQLite] Insert Users!\",\n    ),\n  )\n  const adv = arr.filter(val => val.type === \"adv\")\n  const std = arr.filter(val => val.type === \"std\")\n  const progressAdv = []\n  const progressStd = []\n  adv.forEach(val => {\n    progressAdv.push(\n      new Promise((resolve, reject) =>\n        db.exec(\n          `\n        INSERT OR REPLACE INTO ADVISOR (AdvisorID, AdvName, AdvSurname, Password)\n        VALUES ('${val.ID}', '${val.name}', '${val.surname}', '${val.password}');\n        `,\n          err => {\n            if (err) console.error(colors.red(err.message))\n            resolve()\n          },\n        ),\n      ),\n    )\n  })\n  std.forEach(val => {\n    progressStd.push(\n      new Promise((resolve, reject) =>\n        db.exec(\n          `\n        INSERT OR REPLACE INTO STUDENT (StudentID, StdName, StdSurname, AdvisorID, Password)\n        VALUES ('${val.ID}', '${val.name}', '${val.surname}', '${val.advID}','${val.password}');\n        `,\n          err => {\n            if (err) console.error(colors.red(err.message))\n            resolve()\n          },\n        ),\n      ),\n    )\n  })\n  await Promise.all(progressAdv)\n  await Promise.all(progressStd)\n  console.log(\n    colors.green(\n      \"[\" + new Date().toUTCString() + \"] \" + \"[SQLite] Insert Users complete!\",\n    ),\n  )\n  db.exec(\"PRAGMA synchronous=ON\")\n}\n\nexport async function insertPlans(arr: any[]): Promise<void> {\n  db.exec(\"PRAGMA synchronous=OFF\")\n  console.log(\n    colors.green(\n      \"[\" + new Date().toUTCString() + \"] \" + \"[SQLite] Insert Plans!\",\n    ),\n  )\n  const progress = []\n  arr.forEach(val => {\n    val.plans.forEach((val2: Course) => {\n      progress.push(\n        new Promise((resolve, reject) =>\n          db.exec(\n            `\n            INSERT OR REPLACE INTO STDPLAN (StudentID, CourseID, Year, Term, Grade)\n            VALUES ('${val.ID}', '${val2.CourseID}', '${val2.Year}', '${val2.Term}','${val2.Grade}');\n          `,\n            err => {\n              if (err) console.error(colors.red(err.message))\n              resolve()\n            },\n          ),\n        ),\n      )\n    })\n  })\n  await Promise.all(progress)\n  console.log(\n    colors.green(\n      \"[\" + new Date().toUTCString() + \"] \" + \"[SQLite] Insert Plans complete!\",\n    ),\n  )\n  db.exec(\"PRAGMA synchronous=ON\")\n}\n\nexport async function newChat(val: Chat): Promise<void> {\n  await new Promise((resolve, reject) =>\n    db.exec(\n      `\n        INSERT OR IGNORE INTO CHAT (StudentID, AdvisorID, Time, Message, SentBy)\n        VALUES ('${val.StudentID}', '${val.AdvisorID}', ${val.Time}, '${val.Message}', '${val.SentBy}');\n        `,\n      err => {\n        if (err) console.error(colors.red(err.message))\n        resolve()\n      },\n    ),\n  )\n}\n"],"file":"insert.js"}