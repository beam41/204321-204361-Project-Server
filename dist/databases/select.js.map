{"version":3,"sources":["../../src/databases/select.ts"],"names":["compareUP","username","password","found","Promise","resolve","reject","db","get","err","row","then","value","findUser","getPlans","stuID","all","solve","forEach","val","Grade","push","CourseID","CourseName","CourseCredit","Year","Term","getChat","advID","time","getAdv","AdvisorID","getStuList","advId","failed","PerFailed","StudentID","v","grade","exec","console","error","colors","red","message"],"mappings":";;;;;;;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;AAEA;;;;;SAKsBA,S;;;AAwCtB;;;;;;;;;;;;0BAxCO,iBACLC,QADK,EAELC,QAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAIDC,YAAAA,KAJC,GAIe,IAJf;AAAA;AAAA,mBAKC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,qBAChBC,UAAGC,GAAH,kFAIuBP,QAJvB,wCAKsBC,QALtB,cAOE,UAACO,GAAD,EAAMC,GAAN,EAAc;AACZ,oBAAID,GAAJ,EAASH,MAAM,CAACG,GAAD,CAAN,CAAT,KACKJ,OAAO,CAACK,GAAD,CAAP;AACN,eAVH,CADgB;AAAA,aAAZ,EAaJC,IAbI,CAaC,UAACC,KAAD,EAAoB;AACzB,kBAAIA,KAAJ,EAAWT,KAAK,GAAG,SAAR;AACZ,aAfK,CALD;;AAAA;AAAA;AAAA,mBAqBC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,qBAChBC,UAAGC,GAAH,kFAIuBP,QAJvB,wCAKsBC,QALtB,cAOE,UAACO,GAAD,EAAMC,GAAN,EAAc;AACZ,oBAAID,GAAJ,EAASH,MAAM,CAACG,GAAD,CAAN,CAAT,KACKJ,OAAO,CAACK,GAAD,CAAP;AACN,eAVH,CADgB;AAAA,aAAZ,EAaJC,IAbI,CAaC,UAACC,KAAD,EAAoB;AACzB,kBAAIA,KAAK,IAAI,CAACT,KAAd,EAAqBA,KAAK,GAAG,SAAR;AACtB,aAfK,CArBD;;AAAA;AAAA,6CAqCEA,KArCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SA+CeU,Q;;;;;;;0BAAf,kBAAwBZ,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACDE,YAAAA,KADC,GACgB,IADhB;AAAA;AAAA,mBAEC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,qBAChBC,UAAGC,GAAH,kFAIuBP,QAJvB,cAME,UAACQ,GAAD,EAAMC,GAAN,EAAc;AACZ,oBAAID,GAAJ,EAASH,MAAM,CAACG,GAAD,CAAN,CAAT,KACKJ,OAAO,CAACK,GAAD,CAAP;AACN,eATH,CADgB;AAAA,aAAZ,EAYJC,IAZI,CAYC,UAACC,KAAD,EAAoB;AACzB,kBAAIA,KAAJ,EAAWT,KAAK,GAAG,IAAR;AACZ,aAdK,CAFD;;AAAA;AAAA;AAAA,mBAiBC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,qBAChBC,UAAGC,GAAH,kFAIuBP,QAJvB,cAME,UAACQ,GAAD,EAAMC,GAAN,EAAc;AACZ,oBAAID,GAAJ,EAASH,MAAM,CAACG,GAAD,CAAN,CAAT,KACKJ,OAAO,CAACK,GAAD,CAAP;AACN,eATH,CADgB;AAAA,aAAZ,EAYJC,IAZI,CAYC,UAACC,KAAD,EAAoB;AACzB,kBAAIA,KAAK,IAAI,CAACT,KAAd,EAAqBA,KAAK,GAAG,IAAR;AACtB,aAdK,CAjBD;;AAAA;AAAA,8CAgCEA,KAhCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAmCeW,Q;;;;;;;0BAAf,kBAAwBC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEC,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,qBAChBC,UAAGS,GAAH,uNAKyBD,KALzB,6DAQE,UAACN,GAAD,EAAMC,GAAN,EAAc;AACZ,oBAAID,GAAJ,EAASH,MAAM,CAACG,GAAD,CAAN,CAAT,KACK;AACH,sBAAIQ,KAAK,GAAG,EAAZ;AACAP,kBAAAA,GAAG,CAACQ,OAAJ,CAAY,UAACC,GAAD,EAAiB;AAC3B,wBAAIA,GAAG,CAACC,KAAJ,KAAc,GAAlB,EAAuB;AACrBH,sBAAAA,KAAK,CAACI,IAAN,CAAW;AACTC,wBAAAA,QAAQ,EAAEH,GAAG,CAACG,QADL;AAETC,wBAAAA,UAAU,EAAEJ,GAAG,CAACI,UAFP;AAGTC,wBAAAA,YAAY,EAAEL,GAAG,CAACK,YAHT;AAITC,wBAAAA,IAAI,EAAEN,GAAG,CAACM,IAJD;AAKTC,wBAAAA,IAAI,EAAEP,GAAG,CAACO,IALD;AAMTN,wBAAAA,KAAK,EAAED,GAAG,CAACC;AANF,uBAAX;AAQD,qBATD,MASOH,KAAK,CAACI,IAAN,CAAWF,GAAX;AACR,mBAXD;AAYAd,kBAAAA,OAAO,CAACY,KAAD,CAAP;AACD;AACF,eA1BH,CADgB;AAAA,aAAZ,EA6BJN,IA7BI,CA6BC,UAACC,KAAD,EAAqB;AAC1B,kBAAIA,KAAJ,EAAWT,KAAK,GAAGS,KAAR;AACZ,aA/BK,CAFD;;AAAA;AAAA,8CAkCET,KAlCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAqCewB,O;;;;;;;0BAAf,kBACLZ,KADK,EAELa,KAFK,EAGLC,IAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAMC,IAAIzB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,qBAChBC,UAAGS,GAAH,uHAIwBD,KAJxB,0CAKsBa,KALtB,oCAMgBC,IANhB,aAQE,UAACpB,GAAD,EAAMC,GAAN,EAAc;AACZ,oBAAID,GAAJ,EAASH,MAAM,CAACG,GAAD,CAAN,CAAT,KACKJ,OAAO,CAACK,GAAD,CAAP;AACN,eAXH,CADgB;AAAA,aAAZ,EAcJC,IAdI,CAcC,UAACC,KAAD,EAAmB;AACxB,kBAAIA,KAAJ,EAAWT,KAAK,GAAGS,KAAR;AACZ,aAhBK,CAND;;AAAA;AAAA,8CAuBET,KAvBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SA0Be2B,M;;;;;;;0BAAf,kBAAsBf,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEC,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,qBAChBC,UAAGC,GAAH,sFAIuBO,KAJvB,cAME,UAACN,GAAD,EAAMC,GAAN,EAAc;AACZ,oBAAID,GAAJ,EAASH,MAAM,CAACG,GAAD,CAAN,CAAT,KACKJ,OAAO,CAACK,GAAD,CAAP;AACN,eATH,CADgB;AAAA,aAAZ,EAYJC,IAZI,CAYC,UAACC,KAAD,EAAgB;AACrB,kBAAIA,KAAJ,EAAWT,KAAK,GAAGS,KAAK,CAACmB,SAAd;AACZ,aAdK,CAFD;;AAAA;AAAA,8CAiBE5B,KAjBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAoBe6B,U;;;;;;;0BAAf,kBAA0BC,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACD9B,YAAAA,KADC,GACc,EADd;AAAA;AAAA,mBAEC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,qBAChBC,UAAGS,GAAH,0HAIyBiB,KAJzB,cAME,UAACxB,GAAD,EAAMC,GAAN,EAAc;AACZ,oBAAID,GAAJ,EAASH,MAAM,CAACG,GAAD,CAAN,CAAT,KACKJ,OAAO,CAACK,GAAD,CAAP;AACN,eATH,CADgB;AAAA,aAAZ,EAYJC,IAZI,CAYC,UAACC,KAAD,EAAgB;AACrB,kBAAIA,KAAJ,EACEA,KAAK,CAACM,OAAN,CAAc,UAAAC,GAAG,EAAI;AACnB,oBAAIe,MAAM,GAAGf,GAAG,CAACgB,SAAjB;;AACA,oBAAI,CAACD,MAAL,EAAa;AACXpB,kBAAAA,QAAQ,CAACK,GAAG,CAACiB,SAAL,CAAR,CAAwBzB,IAAxB,CAA6B,UAAA0B,CAAC,EAAI;AAChC,wBAAMC,KAAK,GAAG,CAAC,oBAASD,CAAT,CAAf;AACAH,oBAAAA,MAAM,GAAG,0BAAeI,KAAf,CAAT;;AACA/B,8BAAGgC,IAAH,0DAEmCL,MAFnC,gDAGuBf,GAAG,CAACiB,SAH3B,sBAKE,UAAA3B,GAAG,EAAI;AACL,0BAAIA,GAAJ,EAAS+B,OAAO,CAACC,KAAR,CAAcC,iBAAOC,GAAP,CAAWlC,GAAG,CAACmC,OAAf,CAAd;AACV,qBAPH;AASD,mBAZD;AAaD;;AACDzC,gBAAAA,KAAK,CAACkB,IAAN,mBACKF,GADL;AAEEgB,kBAAAA,SAAS,EAAED;AAFb;AAID,eArBD;AAsBH,aApCK,CAFD;;AAAA;AAAA,8CAuCE/B,KAvCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { db } from \"./index\"\nimport { Student, Advisor, Course, Chat } from \"../models\"\nimport { GradeAvg, percentRetired } from \"../util/calc\"\nimport colors from \"colors/safe\"\n\n/**\n * compare Username and Password\n *\n * promise value will be true if match\n */\nexport async function compareUP(\n  username: string,\n  password: string,\n): Promise<string> {\n  let found: string = null\n  await new Promise((resolve, reject) =>\n    db.get(\n      `\n    SELECT  StudentID\n    FROM    STUDENT\n    WHERE   StudentID = '${username}'\n    AND     Password = '${password}'\n    `,\n      (err, row) => {\n        if (err) reject(err)\n        else resolve(row)\n      },\n    ),\n  ).then((value: Student) => {\n    if (value) found = \"student\"\n  })\n  await new Promise((resolve, reject) =>\n    db.get(\n      `\n    SELECT  AdvisorID\n    FROM    ADVISOR\n    WHERE   AdvisorID = '${username}'\n    AND     Password = '${password}'\n    `,\n      (err, row) => {\n        if (err) reject(err)\n        else resolve(row)\n      },\n    ),\n  ).then((value: Advisor) => {\n    if (value && !found) found = \"advisor\"\n  })\n  return found\n}\n\n/**\n * find User by username\n *\n * promise value will be true if match\n *\n * It's compareUP w/o password\n */\nexport async function findUser(username: string): Promise<boolean> {\n  let found: boolean = null\n  await new Promise((resolve, reject) =>\n    db.get(\n      `\n    SELECT  StudentID\n    FROM    STUDENT\n    WHERE   StudentID = '${username}'\n    `,\n      (err, row) => {\n        if (err) reject(err)\n        else resolve(row)\n      },\n    ),\n  ).then((value: Student) => {\n    if (value) found = true\n  })\n  await new Promise((resolve, reject) =>\n    db.get(\n      `\n    SELECT  AdvisorID\n    FROM    ADVISOR\n    WHERE   AdvisorID = '${username}'\n    `,\n      (err, row) => {\n        if (err) reject(err)\n        else resolve(row)\n      },\n    ),\n  ).then((value: Advisor) => {\n    if (value && !found) found = true\n  })\n  return found\n}\n\nexport async function getPlans(stuID: string): Promise<Course[]> {\n  let found: Course[]\n  await new Promise((resolve, reject) =>\n    db.all(\n      `\n      SELECT P.CourseID, C.CourseName, P.\"Year\", P.Term, P.Grade, P.EditedGrade, C.CourseCredit\n      FROM STDPLAN P\n      INNER JOIN COURSE C ON P.CourseID = C.CourseID\n      WHERE P.StudentID = '${stuID}'\n      ORDER BY P.\"Year\", P.Term, P.CourseID\n    `,\n      (err, row) => {\n        if (err) reject(err)\n        else {\n          let solve = []\n          row.forEach((val: Course) => {\n            if (val.Grade !== \"P\") {\n              solve.push({\n                CourseID: val.CourseID,\n                CourseName: val.CourseName,\n                CourseCredit: val.CourseCredit,\n                Year: val.Year,\n                Term: val.Term,\n                Grade: val.Grade,\n              })\n            } else solve.push(val)\n          })\n          resolve(solve)\n        }\n      },\n    ),\n  ).then((value: Course[]) => {\n    if (value) found = value\n  })\n  return found\n}\n\nexport async function getChat(\n  stuID: string,\n  advID: string,\n  time: number,\n): Promise<Chat[]> {\n  let found: Chat[]\n  await new Promise((resolve, reject) =>\n    db.all(\n      `\n      SELECT \tStudentID, AdvisorID, Time, Message, SentBy\n      FROM \tCHAT\n      WHERE \tStudentID = '${stuID}'\n      AND\t\tAdvisorID = '${advID}'\n      AND\t\tTime > ${time}\n    `,\n      (err, row) => {\n        if (err) reject(err)\n        else resolve(row)\n      },\n    ),\n  ).then((value: Chat[]) => {\n    if (value) found = value\n  })\n  return found\n}\n\nexport async function getAdv(stuID: string): Promise<string> {\n  let found: string\n  await new Promise((resolve, reject) =>\n    db.get(\n      `\n      SELECT \tAdvisorID\n      FROM\tSTUDENT\n      WHERE\tStudentID = '${stuID}'\n    `,\n      (err, row) => {\n        if (err) reject(err)\n        else resolve(row)\n      },\n    ),\n  ).then((value: any) => {\n    if (value) found = value.AdvisorID\n  })\n  return found\n}\n\nexport async function getStuList(advId: string): Promise<any[]> {\n  let found: any[] = []\n  await new Promise((resolve, reject) =>\n    db.all(\n      `\n      SELECT \tStudentID, StdName, StdSurname, PerFailed\n      FROM\t  STUDENT\n      WHERE\t  AdvisorID = '${advId}'\n    `,\n      (err, row) => {\n        if (err) reject(err)\n        else resolve(row)\n      },\n    ),\n  ).then((value: any) => {\n    if (value)\n      value.forEach(val => {\n        let failed = val.PerFailed\n        if (!failed) {\n          getPlans(val.StudentID).then(v => {\n            const grade = +GradeAvg(v)\n            failed = percentRetired(grade)\n            db.exec(\n              `\n              UPDATE STUDENT SET PerFailed = ${failed}\n              WHERE StudentID = '${val.StudentID}'\n            `,\n              err => {\n                if (err) console.error(colors.red(err.message))\n              },\n            )\n          })\n        }\n        found.push({\n          ...val,\n          PerFailed: failed,\n        })\n      })\n  })\n  return found\n}\n"],"file":"select.js"}