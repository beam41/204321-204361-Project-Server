{"version":3,"sources":["../src/index.ts"],"names":["console","log","colors","yellow","Date","toUTCString","process","env","NODE_ENV","app","server","http","createServer","io","use","bodyParser","json","urlencoded","extended","express","path","join","__dirname","routes","auth","test","request","plan","chat","adv","get","req","res","send","sendFile","port","PORT","listen","green","bold"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEAA,OAAO,CAACC,GAAR,CACEC,iBAAOC,MAAP,CACE,MACE,IAAIC,IAAJ,GAAWC,WAAX,EADF,GAEE,IAFF,uCAG+BC,OAAO,CAACC,GAAR,CAAYC,QAH3C,WADF,CADF;AASA;AACA;AACA;AAEA,IAAMC,GAAwB,GAAG,0BAAjC;;AACA,IAAMC,MAAM,GAAGC,iBAAKC,YAAL,CAAkBH,GAAlB,CAAf;;AACA,IAAMI,EAAE,GAAG,wBAASH,MAAT,CAAX,C,CAEA;;AACAD,GAAG,CAACK,GAAJ,CAAQ,uBAAR;AACAL,GAAG,CAACK,GAAJ,CAAQC,uBAAWC,IAAX,EAAR;AACAP,GAAG,CAACK,GAAJ,CAAQC,uBAAWE,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACAT,GAAG,CAACK,GAAJ,CAAQK,8BAAeC,iBAAKC,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAAf,CAAR,E,CAEA;;AACAb,GAAG,CAACK,GAAJ,CAAQ,WAAR,EAAqBS,mBAAOC,IAA5B;AACAf,GAAG,CAACK,GAAJ,CAAQ,WAAR,EAAqBS,mBAAOE,IAA5B;AACAhB,GAAG,CAACK,GAAJ,CAAQ,cAAR,EAAwBS,mBAAOG,OAA/B;AACAjB,GAAG,CAACK,GAAJ,CAAQ,WAAR,EAAqBS,mBAAOI,IAA5B;AACAlB,GAAG,CAACK,GAAJ,CAAQ,WAAR,EAAqBS,mBAAOK,IAA5B;AACAnB,GAAG,CAACK,GAAJ,CAAQ,UAAR,EAAoBS,mBAAOM,GAA3B,E,CAEA;;AACA,sBAAKhB,EAAL;AAEAJ,GAAG,CAACqB,GAAJ,CAAQ,MAAR,EAAgB,UAACC,GAAD,EAAMC,GAAN;AAAA,SAAcA,GAAG,CAACC,IAAJ,CAAS,IAAT,CAAd;AAAA,CAAhB;AAEAxB,GAAG,CAACqB,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,EAAAA,GAAG,CAACE,QAAJ,CAAad,iBAAKC,IAAL,CAAUC,SAAV,EAAqB,OAArB,EAA8B,YAA9B,CAAb;AACD,CAFD,E,CAIA;;AACA,IAAIa,IAAI,GAAG7B,OAAO,CAACC,GAAR,CAAY6B,IAAZ,IAAoB,IAA/B;AACA1B,MAAM,CAAC2B,MAAP,CAAcF,IAAd,EAAoB;AAAA,SAClBnC,OAAO,CAACC,GAAR,CACEC,iBAAOoC,KAAP,CACE,MACE,IAAIlC,IAAJ,GAAWC,WAAX,EADF,GAEE,IAFF,GAGE,qCAHF,GAIEH,iBAAOqC,IAAP,WAAeJ,IAAf,EALJ,CADF,CADkB;AAAA,CAApB","sourcesContent":["import \"dotenv/config\"\nimport \"babel-polyfill\"\nimport colors from \"colors/safe\"\nimport express from \"express\"\nimport bodyParser from \"body-parser\"\nimport cors from \"cors\"\nimport routes from \"./routes\"\nimport { runDB } from \"./databases\"\nimport { runDB as runJwtDB } from \"./databases/used-jwt\"\nimport { runDB as runMapDB } from \"./databases/usn-map\"\nimport http from \"http\"\nimport socketio from \"socket.io\"\nimport chat from \"./socket/chat\"\nimport path from \"path\"\n\nconsole.log(\n  colors.yellow(\n    \"[\" +\n      new Date().toUTCString() +\n      \"] \" +\n      `This server is running in ${process.env.NODE_ENV} mode!`,\n  ),\n)\n\nrunDB()\nrunJwtDB()\nrunMapDB()\n\nconst app: express.Application = express()\nconst server = http.createServer(app)\nconst io = socketio(server)\n\n//important middleware\napp.use(cors())\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: true }))\napp.use(express.static(path.join(__dirname, \"build\")))\n\n//routes\napp.use(\"/api/auth\", routes.auth)\napp.use(\"/api/test\", routes.test)\napp.use(\"/api/request\", routes.request)\napp.use(\"/api/plan\", routes.plan)\napp.use(\"/api/chat\", routes.chat)\napp.use(\"/api/adv\", routes.adv)\n\n// passing io\nchat(io)\n\napp.get(\"/api\", (req, res) => res.send(\"Hi\"))\n\napp.get(\"/\", (req, res) => {\n  res.sendFile(path.join(__dirname, \"build\", \"index.html\"))\n})\n\n//listen\nlet port = process.env.PORT || 3000\nserver.listen(port, () =>\n  console.log(\n    colors.green(\n      \"[\" +\n        new Date().toUTCString() +\n        \"] \" +\n        \"[Express] Server listening on port \" +\n        colors.bold(`${port}`),\n    ),\n  ),\n)\n"],"file":"index.js"}