{"version":3,"sources":["../../src/routes/auth.ts"],"names":["router","jwtOptions","jwtFromRequest","ExtractJwt","fromHeader","secretOrKey","process","env","SECRET","jwtAuth","JwtStrategy","payload","done","reJwt","jwt","encode","sub","passport","use","requireJWTAuth","authenticate","session","get","extractIdJwt","req","res","send","user","post","next","body","username","password","type","status","time","Math","trunc","Date","now","iat","exp","TIMEOUT","typ","userType","expireOn","adv","console","log","toUTCString","colors","bold","header","decode","jwtDec"],"mappings":"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","sourcesContent":["import { Router } from \"express\"\nimport jwt from \"jwt-simple\"\nimport passport from \"passport\"\nimport { ExtractJwt, Strategy as JwtStrategy } from \"passport-jwt\"\nimport colors from \"colors/safe\"\nimport { Payload } from \"../models\"\nimport { compareUP, findUser, getAdv } from \"../databases/select\"\nimport { insertNew, findExpJwt } from \"../databases/used-jwt\"\n\nconst router: Router = Router()\n\n//JWT and Passport\nconst jwtOptions = {\n  jwtFromRequest: ExtractJwt.fromHeader(\"authorization\"),\n  secretOrKey: process.env.SECRET,\n}\nconst jwtAuth: JwtStrategy = new JwtStrategy(\n  jwtOptions,\n  async (payload: Payload, done) => {\n    const reJwt = jwt.encode(payload, process.env.SECRET)\n    if ((await findUser(payload.sub)) && !(await findExpJwt(reJwt)))\n      done(null, true)\n    else done(null, false)\n  },\n)\npassport.use(jwtAuth)\n\n//login middleware\nexport const requireJWTAuth = passport.authenticate(\"jwt\", { session: false })\n\n//login check\nrouter.get(\"/test\", requireJWTAuth, extractIdJwt, (req, res) => {\n  res.send(`${req.user} is here!`)\n})\n\nrouter.post(\n  \"/login\",\n  // login check handler\n  async (req, res, next) => {\n    // @ts-ignore\n    req.type = await compareUP(req.body.username, req.body.password)\n    if (await compareUP(req.body.username, req.body.password)) next()\n    else res.status(400).send(\"UsnPwd\")\n  },\n  // return payload\n  async (req, res) => {\n    const time = Math.trunc(Date.now() / 1000)\n    const payload: Payload = {\n      sub: req.body.username,\n      iat: time,\n      exp: time + +process.env.TIMEOUT,\n      // @ts-ignore\n      typ: req.type,\n    }\n    res.send({\n      jwt: jwt.encode(payload, process.env.SECRET),\n      username: req.body.username,\n      // @ts-ignore\n      userType: req.type,\n      expireOn: time + +process.env.TIMEOUT,\n      adv: await getAdv(req.body.username),\n    })\n    console.log(\n      \"[\" +\n        new Date().toUTCString() +\n        \"] \" +\n        \"[Express] User \" +\n        colors.bold(req.body.username) +\n        \" is logging in.\",\n    )\n  },\n)\n\nrouter.post(\n  \"/logout\",\n  requireJWTAuth,\n  extractIdJwt,\n  // return payload\n  async (req, res) => {\n    insertNew(\n      req.header(\"Authorization\"),\n      jwt.decode(req.header(\"Authorization\"), process.env.SECRET).exp * 1000,\n    )\n    res.send(\"done\")\n    console.log(\n      \"[\" +\n        new Date().toUTCString() +\n        \"] \" +\n        \"[Express] User \" +\n        // @ts-ignore\n        colors.bold(req.user) +\n        \" is logged out.\",\n    )\n  },\n)\n\nexport async function extractIdJwt(req, res, next) {\n  const jwtDec = jwt.decode(req.header(\"Authorization\"), process.env.SECRET)\n  req.user = jwtDec.sub\n  req.userType = jwtDec.typ\n  next()\n}\n\nexport default router\n"],"file":"auth.js"}