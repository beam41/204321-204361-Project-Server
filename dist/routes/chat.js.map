{"version":3,"sources":["../../src/routes/chat.ts"],"names":["router","post","requireJWTAuth","extractIdJwt","req","res","userType","bd","StudentID","user","AdvisorID","body","to","Time","Message","SentBy","send","get","getChat","query","latest","status","params","id"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAeA,IAAMA,MAAc,GAAG,sBAAvB;AAEAA,MAAM,CAACC,IAAP,CAAY,GAAZ,EAAiBC,oBAAjB,EAAiCC,kBAAjC,EAA+C,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC3D;AACA,MAAID,GAAG,CAACE,QAAJ,KAAiB,SAArB,EAAgC;AAC9B,QAAMC,EAAE,GAAG;AACT;AACAC,MAAAA,SAAS,EAAEJ,GAAG,CAACK,IAFN;AAGTC,MAAAA,SAAS,EAAEN,GAAG,CAACO,IAAJ,CAASC,EAHX;AAITC,MAAAA,IAAI,EAAET,GAAG,CAACO,IAAJ,CAASE,IAJN;AAKTC,MAAAA,OAAO,EAAEV,GAAG,CAACO,IAAJ,CAASG,OALT;AAMTC,MAAAA,MAAM,EAAE;AANC,KAAX,CAD8B,CAS9B;;AACA,yBAAQR,EAAR;AACAF,IAAAA,GAAG,CAACW,IAAJ,CAAS,CAACT,EAAD,CAAT;AACD,GAZD,MAYO;AACL,QAAMA,GAAE,GAAG;AACTC,MAAAA,SAAS,EAAEJ,GAAG,CAACO,IAAJ,CAASC,EADX;AAET;AACAF,MAAAA,SAAS,EAAEN,GAAG,CAACK,IAHN;AAITI,MAAAA,IAAI,EAAET,GAAG,CAACO,IAAJ,CAASE,IAJN;AAKTC,MAAAA,OAAO,EAAEV,GAAG,CAACO,IAAJ,CAASG,OALT;AAMTC,MAAAA,MAAM,EAAE;AANC,KAAX,CADK,CASL;;AACA,yBAAQR,GAAR;AACAF,IAAAA,GAAG,CAACW,IAAJ,CAAS,CAACT,GAAD,CAAT;AACD;AACF,CA3BD;AA6BAP,MAAM,CAACiB,GAAP,CAAW,GAAX,EAAgBf,oBAAhB,EAAgCC,kBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA8C,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAExCD,GAAG,CAACE,QAAJ,KAAiB,SAFuB;AAAA;AAAA;AAAA;;AAAA,0BAI1CD,GAJ0C;AAAA,0BAI3Ba,eAJ2B;AAAA,0BAInBd,GAAG,CAACK,IAJe;AAAA;AAAA,mBAIH,oBAAOL,GAAG,CAACK,IAAX,CAJG;;AAAA;AAAA;AAAA,0BAIeL,GAAG,CAACe,KAAJ,CAAUC,MAJzB;AAAA;AAAA;;AAAA;AAAA;;AAAA,wBAItCJ,IAJsC;;AAAA;AAAA;;AAAA;AAKvCX,YAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBL,IAAhB;;AALuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9C;;AAAA;AAAA;AAAA;AAAA;AAQAhB,MAAM,CAACiB,GAAP,CAAW,MAAX,EAAmBf,oBAAnB,EAAmCC,kBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAiD,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAE3CD,GAAG,CAACE,QAAJ,KAAiB,SAF0B;AAAA;AAAA;AAAA;;AAAA,2BAI7CD,GAJ6C;AAAA;AAAA,mBAI9B,qBAAQD,GAAG,CAACkB,MAAJ,CAAWC,EAAnB,EAAuBnB,GAAG,CAACK,IAA3B,EAAiCL,GAAG,CAACe,KAAJ,CAAUC,MAA3C,CAJ8B;;AAAA;AAAA;;AAAA,yBAIzCJ,IAJyC;;AAAA;AAAA;;AAAA;AAK1CX,YAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBL,IAAhB;;AAL0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjD;;AAAA;AAAA;AAAA;AAAA;eAQehB,M","sourcesContent":["import { Router } from \"express\"\nimport { requireJWTAuth, extractIdJwt } from \"./auth\"\nimport { newChat } from \"../databases/insert\"\nimport { getChat, getAdv } from \"../databases/select\"\n\n/**\n * the reason I sent / received message here\n *\n * is because it's can easily does the authorization\n *\n * while SocketIO (I) can't\n *\n * so it's can prevent spoofing\n *\n * (I don't know why I think about security in small semester project)\n *\n */\n\nconst router: Router = Router()\n\nrouter.post(\"/\", requireJWTAuth, extractIdJwt, (req, res) => {\n  // @ts-ignore\n  if (req.userType === \"student\") {\n    const bd = {\n      // @ts-ignore\n      StudentID: req.user,\n      AdvisorID: req.body.to,\n      Time: req.body.Time,\n      Message: req.body.Message,\n      SentBy: \"student\",\n    }\n    // @ts-ignore\n    newChat(bd)\n    res.send([bd])\n  } else {\n    const bd = {\n      StudentID: req.body.to,\n      // @ts-ignore\n      AdvisorID: req.user,\n      Time: req.body.Time,\n      Message: req.body.Message,\n      SentBy: \"advisor\",\n    }\n    // @ts-ignore\n    newChat(bd)\n    res.send([bd])\n  }\n})\n\nrouter.get(\"/\", requireJWTAuth, extractIdJwt, async (req, res) => {\n  // @ts-ignore\n  if (req.userType === \"student\")\n    // @ts-ignore\n    res.send(await getChat(req.user, await getAdv(req.user), req.query.latest))\n  else res.status(403).send()\n})\n\nrouter.get(\"/:id\", requireJWTAuth, extractIdJwt, async (req, res) => {\n  // @ts-ignore\n  if (req.userType === \"advisor\")\n    // @ts-ignore\n    res.send(await getChat(req.params.id, req.user, req.query.latest))\n  else res.status(403).send()\n})\n\nexport default router\n"],"file":"chat.js"}